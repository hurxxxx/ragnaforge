[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ragnaforge"
version = "1.0.0"
description = "Hybrid RAG system for intelligent document processing and search"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "hurxxxx", email = "hurxxxx@gmail.com"}
]
maintainers = [
    {name = "hurxxxx", email = "hurxxxx@gmail.com"}
]
keywords = [
    "rag",
    "retrieval-augmented-generation", 
    "document-processing",
    "vector-search",
    "hybrid-search",
    "embedding",
    "korean-nlp",
    "fastapi",
    "qdrant",
    "meilisearch"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.10"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "numpy>=1.24.0",
    "torch>=2.1.0",
    "transformers>=4.36.0",
    "sentence-transformers>=2.2.2",
    "qdrant-client>=1.7.0",
    "meilisearch>=0.31.0",
    "python-multipart>=0.0.6",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.2.1",
    "httpx>=0.25.0",
    "Pillow>=10.1.0",
    "PyPDF2>=3.0.1",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.2",
    "markdown>=3.5.1",
    "beautifulsoup4>=4.12.2",
    "lxml>=4.9.3",
    "tiktoken>=0.5.2",
    "langchain-text-splitters>=0.0.1",
    "scikit-learn>=1.3.2",
    "pandas>=2.1.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
marker = [
    "marker-pdf[full]",
]
docling = [
    "docling",
]
all = [
    "marker-pdf[full]",
    "docling",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/hurxxxx/ragnaforge"
Documentation = "https://github.com/hurxxxx/ragnaforge#readme"
Repository = "https://github.com/hurxxxx/ragnaforge"
"Bug Tracker" = "https://github.com/hurxxxx/ragnaforge/issues"
Changelog = "https://github.com/hurxxxx/ragnaforge/releases"

[project.scripts]
ragnaforge = "main:main"

[tool.setuptools]
packages = ["services", "routers"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["services", "routers"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
